<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>windows on Mark Ramige: Appsec and Bug Bounties</title>
    <link>https://markramige.com/tags/windows/</link>
    <description>Recent content in windows on Mark Ramige: Appsec and Bug Bounties</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 &lt;a href=&#39;https://github.com/markramige/markramigecom&#39;&gt;Mark Ramige&lt;/a&gt; :: &lt;a href=&#39;https://creativecommons.org/licenses/by/4.0/?ref=chooser-v1&#39;&gt;CC BY 4.0&lt;/a&gt; Licensed :: Powered by &lt;a href=&#39;http://gohugo.io&#39;&gt;Hugo&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 04 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://markramige.com/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing and Optimizing Kali Linux on Hyper-V</title>
      <link>https://markramige.com/posts/installing-kali-linux-on-hyperv/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://markramige.com/posts/installing-kali-linux-on-hyperv/</guid>
      <description>Kali Linux runs great on Windows if you’re using VirtualBox or VMware Workstation. You might have tried installing it on Hyper-V so that you can run WSL 2 distributions at the same time and experienced how poorly Hyper-V handles desktop Linux. Microsoft is working to fix this by enabling enhanced session mode on desktop linux distributions. I’ll show you how to set up Kali Linux on Hyper-V so that it runs faster and also to enable copying and pasting between the VM and host (including files).</description>
      <content>&lt;p&gt;Kali Linux runs great on Windows if you’re using VirtualBox or VMware Workstation. You might have tried installing it on Hyper-V so that you can run WSL 2 distributions at the same time and experienced how poorly Hyper-V handles desktop Linux. &lt;a href=&#34;https://github.com/microsoft/linux-vm-tools&#34;&gt;Microsoft is working to fix this&lt;/a&gt; by enabling enhanced session mode on desktop linux distributions. I’ll show you how to set up Kali Linux on Hyper-V so that it runs faster and also to enable copying and pasting between the VM and host (including files).&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#hyper-v-network-setup&#34;&gt;Hyper-V network setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-new-virtual-machine&#34;&gt;Create a new virtual machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-virtual-hard-disk-and-enable-enhanced-session&#34;&gt;Create a virtual hard disk and enable enhanced session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#open-and-adjust-vm-settings&#34;&gt;Open and adjust VM settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-partition-table-and-format-partitions&#34;&gt;Create partition table and format partitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-kali-linux&#34;&gt;Install Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-linux-vm-tools&#34;&gt;Install linux-vm-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adjust-xfce-settings&#34;&gt;Adjust XFCE settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-improvements&#34;&gt;Future improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;*Open a PowerShell prompt with administrator privileges*&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;hyper-v-network-setup&#34;&gt;Hyper-V network setup&lt;/h2&gt;
&lt;p&gt;We need to create a new network adapter called “External” that is bridged to your wifi or ethernet network adapter.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;Get-NetAdapter&lt;/code&gt; to get a list of your network adapters. Note the name of the one that connects to the Internet.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;New-VMSwitch -Name &amp;quot;External&amp;quot; -AllowManagementOS $True -NetAdapterName &amp;quot;YOURADAPTERNAME&amp;quot;&lt;/code&gt; and edit the name of your network adapter.&lt;/p&gt;
&lt;p&gt;You will be disconnected from the network when the adapter is added. If your connection isn’t working after a few seconds, then the settings from your real adapter didn’t copy over correctly to the new “External” adapter. Go and edit them manually to the correct values. My DNS server settings didn’t copy over and I had to add them manually.&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-virtual-machine&#34;&gt;Create a new virtual machine&lt;/h2&gt;
&lt;p&gt;Open up the Hyper-V Manager by running &lt;code&gt;C:\Windows\System32\virtmgmt.msc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/hyper-v-manager.png&#34; alt=&#34;Hyper-V Manager&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on “New” and then “Virtual Machine”&lt;/p&gt;
&lt;p&gt;Choose a name for the new VM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/new-vm-name.png&#34; alt=&#34;Create VM name&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select “Generation 2”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/new-vm-generation-2.png&#34; alt=&#34;Create VM select generation 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Choose how much memory you want to give the machine on startup. Since we’re also selecting “Dynamic Memory” it can go higher depending on what you set as the maximum later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/new-vm-assign-memory.png&#34; alt=&#34;Create VM assign memory&#34;&gt;&lt;/p&gt;
&lt;p&gt;Choose the External adapter that we created earlier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/new-vm-network-connection.png&#34; alt=&#34;Create VM select external connection&#34;&gt;&lt;/p&gt;
&lt;p&gt;We’re going to create a virtual hard disk manually and attach it later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/new-vm-attach-vhd-later.png&#34; alt=&#34;Create VM attach VHD later&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-virtual-hard-disk-and-enable-enhanced-session&#34;&gt;Create a virtual hard disk and enable enhanced session&lt;/h2&gt;
&lt;p&gt;Since we’re creating a dynamic vhdx file, we want to lower the block size so that it &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/best-practices-for-running-linux-on-hyper-v&#34;&gt;will use up less real space&lt;/a&gt;. The path and file name can be anything you want. You can set the SizeBytes (maximum size of the disk) value to anything over 32GB.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;New-VHD -Path C:\VHDs\Kali.vhdx -SizeBytes 128GB -Dynamic -BlockSizeBytes 1MB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;Set-VM -VMName Kali -EnhancedSessionTransportType HvSocket&lt;/code&gt; to enable enhanced session mode.&lt;/p&gt;
&lt;h2 id=&#34;open-and-adjust-vm-settings&#34;&gt;Open and adjust VM settings&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-open-settings.png&#34; alt=&#34;VM open settings&#34;&gt;&lt;/p&gt;
&lt;p&gt;Disable secure boot&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-turn-off-secure-boot.png&#34; alt=&#34;VM settings turn off secure boot&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set the maximum RAM that you can assign to this VM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-memory-size.png&#34; alt=&#34;VM settings memory size&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set the number of processors you want to give the VM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-processors.png&#34; alt=&#34;VM settings processors&#34;&gt;&lt;/p&gt;
&lt;p&gt;I always turn off automatic checkpoints because I like to do them manually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-checkpoints.png&#34; alt=&#34;VM settings checkpoints&#34;&gt;&lt;/p&gt;
&lt;p&gt;I don’t want this machine starting at boot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-no-automatic-start.png&#34; alt=&#34;VM settings startup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Browse to the vhdx file you created earlier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-select-vhd.png&#34; alt=&#34;VM settings select VHD&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add a DVD drive for installation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-add-dvd-drive.png&#34; alt=&#34;VM settings add DVD drive&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select the Kali live iso you downloaded earlier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-select-kali-live-iso.png&#34; alt=&#34;VM settings select Kali live iso&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set the boot order so that it will boot from the iso automatically.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-set-boot-order.png&#34; alt=&#34;VM Settings set boot order&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-partition-table-and-format-partitions&#34;&gt;Create partition table and format partitions&lt;/h2&gt;
&lt;p&gt;Boot the default option in the menu&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-live-boot-menu.png&#34; alt=&#34;Kali live boot menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal and run &lt;code&gt;sudo gdisk /dev/sda&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;o&lt;/code&gt; to create a new partition table&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-live-gdisk-new.png&#34; alt=&#34;Kali live gdisk create partition table&#34;&gt;&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;n&lt;/code&gt; and for the last sector type &lt;code&gt;+128M&lt;/code&gt;, then for the partition type enter &lt;code&gt;ef00&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-live-gdisk-new-efi.png&#34; alt=&#34;Kali live gdisk new efi partition&#34;&gt;&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;n&lt;/code&gt; and choose all the default options to create a linux partition with the remainder of the space.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;p&lt;/code&gt; to print the partition table to verify everything is correct.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-live-gdisk-new-linux.png&#34; alt=&#34;Kali live gdisk new linux partition&#34;&gt;&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;w&lt;/code&gt; to save the partition table and exit gdisk.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;mkdosfs -F 32 -n EFI /dev/sda1&lt;/code&gt; to format the EFI partition.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;mkfs.ext4 -G 4096 /dev/sda2&lt;/code&gt; to format the Kali partition. &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/best-practices-for-running-linux-on-hyper-v&#34;&gt;Microsoft recommends&lt;/a&gt; setting the number of groups to 4096.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-live-gdisk-save-and-mkfs-ext4.png&#34; alt=&#34;Kali live gdisk save partitions and format&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-kali-linux&#34;&gt;Install Kali Linux&lt;/h2&gt;
&lt;p&gt;Open the VM settings and change the image file to the Kali netinstall iso that you downloaded earlier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-select-kali-netinst.png&#34; alt=&#34;VM settings select kali netinstall iso&#34;&gt;&lt;/p&gt;
&lt;p&gt;Run the VM and choose the default boot option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-boot-menu.png&#34; alt=&#34;Kali netinstall boot menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set your language, location, and keyboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-language.png&#34; alt=&#34;Kali netinstall select language&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-location.png&#34; alt=&#34;Kali netinstall select location&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-keyboard.png&#34; alt=&#34;Kali netinstall select keyboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;Choose your hostname and domain name (I left domain blank).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-host-name.png&#34; alt=&#34;Kali netinstall set host name&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-domain-name.png&#34; alt=&#34;Kali netinstall set domain name&#34;&gt;&lt;/p&gt;
&lt;p&gt;Enter your name, user name, and password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-user-full-name.png&#34; alt=&#34;Kali netinstall set full user name&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-user-name.png&#34; alt=&#34;Kali netinstall set user name&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-password.png&#34; alt=&#34;Kali netinstall set password&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set your time zone.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-time-zone.png&#34; alt=&#34;Kali netinstall set timezone&#34;&gt;&lt;/p&gt;
&lt;p&gt;Choose manual partitioning because we already created the partition table and formatted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-manual-partition.png&#34; alt=&#34;Kali netinstall manual partition&#34;&gt;&lt;/p&gt;
&lt;p&gt;The EFI partition is already set up so we want to edit the second partition for Kali.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-partition-select.png&#34; alt=&#34;Kali netinstall select partition to change&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set it to ext4 partition, set the mount point as &lt;code&gt;/&lt;/code&gt; and keep the existing data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-partition-options.png&#34; alt=&#34;Kali netinstall partition options&#34;&gt;&lt;/p&gt;
&lt;p&gt;Write changes to disk.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-partition-finish.png&#34; alt=&#34;Kali netinstall finish partitioning&#34;&gt;&lt;/p&gt;
&lt;p&gt;Continue without a swap partition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-partition-swap.png&#34; alt=&#34;Kali netinstall continue without swap&#34;&gt;&lt;/p&gt;
&lt;p&gt;Continue with installation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-partition-continue.png&#34; alt=&#34;Kali netinstall save partition settings and continue&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set up a network proxy (I left this blank.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-proxy.png&#34; alt=&#34;Kali netinstall enter proxy settings&#34;&gt;&lt;/p&gt;
&lt;p&gt;Choose the software you want installed (I went with the default options)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-software-selection.png&#34; alt=&#34;Kali netinstall select software to install&#34;&gt;&lt;/p&gt;
&lt;p&gt;I had an error message after all of the packages downloaded. I hit continue a few times and it continued installing where it left off without giving another error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-error.png&#34; alt=&#34;Kali netinstall software installation error&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-continue-after-error.png&#34; alt=&#34;Kali netinstall continue after error message&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kali is installed! Shut down the machine and remove the DVD drive in the settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-netinstall-finished.png&#34; alt=&#34;Kali netinstall finished&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/vm-settings-remove-dvd-drive.png&#34; alt=&#34;VM settings remove DVD drive&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-linux-vm-tools&#34;&gt;Install linux-vm-tools&lt;/h2&gt;
&lt;p&gt;Start up the Kali VM and log in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-boot-menu.png&#34; alt=&#34;Kali Linux boot menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-login-screen.png&#34; alt=&#34;Kali Linux login screen&#34;&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal and run &lt;code&gt;git clone https://github.com/markramige/linux-vm-tools&lt;/code&gt; to download the install script&lt;/p&gt;
&lt;p&gt;Now run &lt;code&gt;sudo linux-vm-tools/kali/install.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This script will update Kali, install xrdp, and change some settings that are necessary for the enhanced session mode to activate. Reboot the machine when it finishes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-linux-vm-tools-install.png&#34; alt=&#34;Kali Linux tools install&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can now set the resolution of the RDP session. This screen will pop up every time you boot unless you save the settings. If this screen doesn’t pop up the first time you reboot, try shutting down the machine completely and starting it again. Alternatively you can save the machine state at the kali login screen and the next time you start it up it will switch to the enhanced session.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/hyperv-enhance-resolution.png&#34; alt=&#34;Hyper-V enhanced session menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;You should see the xrdp login screen instead of the default Kali login screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/xrdp-login-screen.png&#34; alt=&#34;Xrdp login screen&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;adjust-xfce-settings&#34;&gt;Adjust XFCE settings&lt;/h2&gt;
&lt;p&gt;I’ve found that disabling desktop compositing makes it feel much faster.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/xfce-disable-compositing.png&#34; alt=&#34;XFCE disable compositing&#34;&gt;&lt;/p&gt;
&lt;p&gt;Disable desktop blanking and locking&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/xfce-disable-display-blanking.png&#34; alt=&#34;XFCE disable display blanking&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set the desktop background to a solid color&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/xfce-desktop-background.png&#34; alt=&#34;XFCE desktop background set to black&#34;&gt;&lt;/p&gt;
&lt;p&gt;All done!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markramige.com/images/installing-kali-linux-on-hyperv/kali-finished-desktop.png&#34; alt=&#34;Kali desktop finished&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;future-improvements&#34;&gt;Future improvements&lt;/h2&gt;
&lt;p&gt;It’s possible to enable sound with &lt;a href=&#34;https://github.com/neutrinolabs/pulseaudio-module-xrdp&#34;&gt;pulseaudio-module-xrdp&lt;/a&gt;. I might try getting that to work if I ever need sound support. Also, usb-over-ip might be a possibility, but I don’t know what types of devices are supported with that.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you need to run Windows as your host OS and aren’t willing to give up WSL 2, then Hyper-V is a decent alternative to VirtualBox and VMware Workstation. It’s not quite as polished as the other options for desktop Linux, but hopefully Microsoft makes some improvements in the future to make it run more smoothly.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Using SSH on Windows 10 and WSL 2</title>
      <link>https://markramige.com/posts/using-ssh-on-windows-10-and-wsl-2/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://markramige.com/posts/using-ssh-on-windows-10-and-wsl-2/</guid>
      <description>Since WSL was introduced several years ago, I&amp;rsquo;ve been using the same process for access my machines remotely. I&amp;rsquo;d run apt-get install openssh-server in WSL and open TCP port 22 in Windows Firewall. WSL 2 adds the extra step of needing to forward a port to the WSL VM. I decided to try using OpenSSH directly since it is now available natively on Windows.
Contents  Install sshd, ssh, and ssh-agent Run sshd and ssh-agent at boot Start sshd and ssh-agent now Create ssh key and add to ssh-agent Add public keys to authorized_keys and set correct permissions Disable password login and restart sshd Make Git for Windows use ssh-agent Set up WSL distributions to use ssh-agent Future improvements Conclusion  *Open a PowerShell prompt with administrator privileges*</description>
      <content>&lt;p&gt;Since WSL was introduced several years ago, I&amp;rsquo;ve been using the same process for access my machines remotely. I&amp;rsquo;d run &lt;code&gt;apt-get install openssh-server&lt;/code&gt; in WSL and open TCP port 22 in Windows Firewall. WSL 2 adds the extra step of needing to &lt;a href=&#34;https://www.hanselman.com/blog/HowToSSHIntoWSL2OnWindows10FromAnExternalMachine.aspx&#34;&gt;forward a port to the WSL VM&lt;/a&gt;. I decided to try using OpenSSH directly since it is now available &lt;a href=&#34;https://github.com/PowerShell/Win32-OpenSSH&#34;&gt;natively on Windows&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install-sshd-ssh-and-ssh-agent&#34;&gt;Install sshd, ssh, and ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run-sshd-and-ssh-agent-at-boot&#34;&gt;Run sshd and ssh-agent at boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#start-sshd-and-ssh-agent-now&#34;&gt;Start sshd and ssh-agent now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-ssh-key-and-add-to-ssh-agent&#34;&gt;Create ssh key and add to ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-public-keys-to-authorized_keys-and-set-correct-permissions&#34;&gt;Add public keys to authorized_keys and set correct permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#disable-password-login-and-restart-sshd&#34;&gt;Disable password login and restart sshd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#make-git-for-windows-use-ssh-agent&#34;&gt;Make Git for Windows use ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-up-wsl-2-distributions-to-use-ssh-agent&#34;&gt;Set up WSL distributions to use ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-improvements&#34;&gt;Future improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;*Open a PowerShell prompt with administrator privileges*&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-sshd-ssh-and-ssh-agent&#34;&gt;Install sshd, ssh, and ssh-agent&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;run-sshd-and-ssh-agent-at-boot&#34;&gt;Run sshd and ssh-agent at boot&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Set-Service -Name sshd -StartupType &#39;Automatic&#39;
Set-Service -Name ssh-agent -StartupType &#39;Automatic&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;start-sshd-and-ssh-agent-now&#34;&gt;Start sshd and ssh-agent now&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Start-Service sshd
Start-Service ssh-agent
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-ssh-key-and-add-to-ssh-agent&#34;&gt;Create SSH key and add to ssh-agent&lt;/h2&gt;
&lt;p&gt;Ignore the &lt;code&gt;-t ed25519&lt;/code&gt; if you need to connect to servers running older OSes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t ed25519
ssh-add
ssh-add -L
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;add-public-keys-to-authorized_keys-and-set-correct-permissions&#34;&gt;Add public keys to authorized_keys and set correct permissions&lt;/h2&gt;
&lt;p&gt;Windows sshd will read two different authorized_keys files depending on if your user account is an administrator.&lt;/p&gt;
&lt;p&gt;The location for normal users is &lt;code&gt;%userprofile%\.ssh\authorized_keys&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The location for administrators is &lt;code&gt;%programdata%\ssh\administrators_authorized_keys&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;administrators_authorized_keys&lt;/code&gt; file will need special permissions set before sshd will use it&lt;/p&gt;
&lt;p&gt;Copy any public keys you want to grant access to your computer to the correct file and then set the administrators_authorized_keys file permissions if needed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;icacls administrators_authorized_keys /inheritance:r
icacls administrators_authorized_keys /grant SYSTEM:`(F`)
icacls administrators_authorized_keys /grant BUILTIN\Administrators:`(F`)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;disable-password-login-and-restart-sshd&#34;&gt;Disable password login and restart sshd&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Stop-Service sshd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Copy C:\ProgramData\ssh\sshd_config to your desktop and edit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#PasswordAuthentication yes
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Move the file back to %programdata%\ssh and then set the correct permissions&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-Acl sshd.pid | Set-Acl sshd_config
Start-Service sshd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;make-git-for-windows-use-ssh-agent&#34;&gt;Make Git for Windows use ssh-agent&lt;/h2&gt;
&lt;p&gt;Search for &lt;code&gt;env&lt;/code&gt; in start and choose the &lt;code&gt;Edit environment variables for your account&lt;/code&gt; option.
&lt;img src=&#34;https://markramige.com/images/using-ssh-on-windows-10-and-wsl-2/start-menu-edit-environment-variables.png&#34; alt=&#34;Search for env on the start menu and choose Edit the system environment variables&#34;&gt;&lt;/p&gt;
&lt;p&gt;Create a new variable named &lt;code&gt;GIT_SSH&lt;/code&gt; with a value of &lt;code&gt;C:\Windows\System32\OpenSSH\ssh.exe&lt;/code&gt;
&lt;img src=&#34;https://markramige.com/images/using-ssh-on-windows-10-and-wsl-2/windows-add-git-ssh-environment-variable.png&#34; alt=&#34;Add the GIT_SSH variable&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;set-up-wsl-2-distributions-to-use-ssh-agent&#34;&gt;Set up WSL 2 distributions to use ssh-agent&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;https://github.com/rupor-github/wsl-ssh-agent/releases/download/v1.4.2/wsl-ssh-agent.7z&#34;&gt;wsl-ssh-agent.7z&lt;/a&gt; and extract &lt;code&gt;npiperelay.exe&lt;/code&gt; to a new directory called &lt;code&gt;.wsl&lt;/code&gt; in your Windows user&amp;rsquo;s home folder.&lt;/p&gt;
&lt;p&gt;In your WSL distribution, run &lt;code&gt;ln -s /mnt/c/Users/YOURWINDOWSUSERNAME ~/winhome&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;.ssh&lt;/code&gt; folder and &lt;code&gt;chmod 700 ~/.ssh&lt;/code&gt; if it doesn&amp;rsquo;t already exist.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;sudo apt install socat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add this snippet to the &lt;code&gt;.bashrc&lt;/code&gt; file in your WSL distribution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export SSH_AUTH_SOCK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/.ssh/agent.sock
ss -a | grep -q $SSH_AUTH_SOCK
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $? -ne &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    rm -f $SSH_AUTH_SOCK
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;/winhome/.wsl/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent&amp;#34;&lt;/span&gt;,nofork &amp;amp; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;future-improvements&#34;&gt;Future improvements&lt;/h2&gt;
&lt;p&gt;I would like to sync up my ssh config file between Windows and WSL. Symlinking the file inside WSL doesn&amp;rsquo;t work because it needs 600 permissions or ssh will give you an error.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I like the added benefit of being able to run native Windows commands via SSH and being able to access multiple WSL distributions with the same SSH server. I think if you are already using sshd inside a WSL distribution and don&amp;rsquo;t need these benefits, then it&amp;rsquo;s not worth switching to native Windows OpenSSH.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>TryHackMe Windows PrivEsc Write-Up</title>
      <link>https://markramige.com/posts/tryhackme-windows-privesc-write-up/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://markramige.com/posts/tryhackme-windows-privesc-write-up/</guid>
      <description>This TryHackMe room gives us a vulnerable Windows Server 2019 virtual machine and demonstrates many different types of Windows privilege escalation techniques. There aren&amp;rsquo;t many challenges included in the room, but just knowing how many different ways attackers can gain elevated privileges on a Windows machine is valuable. In addition, several tools are provided that show us how easy it is to automate checking for privesc vulnerabilities on Windows.
Contents  Service Exploits Registry Passwords Scheduled Tasks Insecure GUI Apps Startup Apps Token Impersonation Privilege Escalation Scripts  Service Exploits Task 3 First off, we&amp;rsquo;re checking permission on the daclsvc service.</description>
      <content>&lt;p&gt;This &lt;a href=&#34;https://tryhackme.com/room/windows10privesc&#34;&gt;TryHackMe room&lt;/a&gt; gives us a vulnerable Windows Server 2019 virtual machine and demonstrates many different types of Windows privilege escalation techniques. There aren&amp;rsquo;t many challenges included in the room, but just knowing how many different ways attackers can gain elevated privileges on a Windows machine is valuable. In addition, several tools are provided that show us how easy it is to automate checking for privesc vulnerabilities on Windows.&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#service-exploits&#34;&gt;Service Exploits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#registry&#34;&gt;Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#passwords&#34;&gt;Passwords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scheduled-tasks&#34;&gt;Scheduled Tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#insecure-gui-apps&#34;&gt;Insecure GUI Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#startup-apps&#34;&gt;Startup Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#token-impersonation&#34;&gt;Token Impersonation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#privilege-escalation-scripts&#34;&gt;Privilege Escalation Scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;service-exploits&#34;&gt;Service Exploits&lt;/h2&gt;
&lt;h3 id=&#34;task-3&#34;&gt;Task 3&lt;/h3&gt;
&lt;p&gt;First off, we&amp;rsquo;re checking permission on the &lt;code&gt;daclsvc&lt;/code&gt; service. We notice that we have &lt;code&gt;SERVICE_CHANGE_CONFIG&lt;/code&gt; permissions and that the service runs with SYSTEM privileges. All we have to do is change the &lt;code&gt;BINARY_PATH_NAME&lt;/code&gt; of the service to make it run our reverse shell when the service starts.&lt;/p&gt;
&lt;h3 id=&#34;task-4&#34;&gt;Task 4&lt;/h3&gt;
&lt;p&gt;Similar to Task 3, we check the permissions of the directory containing the &lt;code&gt;unquotedsvc&lt;/code&gt; service and notice that we can write to the directory. Since the &lt;code&gt;BINARY_PATH_NAME&lt;/code&gt; is unquoted, we copy our reverse shell to the directory and rename it to &lt;code&gt;common.exe&lt;/code&gt;. Since Windows will find &lt;code&gt;common.exe&lt;/code&gt; before &lt;code&gt;Common Files&lt;/code&gt; it executes it instead of the intended service.&lt;/p&gt;
&lt;h3 id=&#34;task-5&#34;&gt;Task 5&lt;/h3&gt;
&lt;p&gt;We find that the registry entry for the &lt;code&gt;regsvc&lt;/code&gt; service has weak permissions. We can change the location of the service executable in the registry so that it runs our reverse shell.&lt;/p&gt;
&lt;h3 id=&#34;task-6&#34;&gt;Task 6&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filepermsvc&lt;/code&gt; executable located at &lt;code&gt;C:\Program Files\File Permissions Service\filepermservice.exe&lt;/code&gt; is writeable by all users. All we have to do is replace it with our reverse shell executable and start the service.&lt;/p&gt;
&lt;h2 id=&#34;registry&#34;&gt;Registry&lt;/h2&gt;
&lt;h3 id=&#34;task-7&#34;&gt;Task 7&lt;/h3&gt;
&lt;p&gt;In this task we&amp;rsquo;re checking the registry for programs that are set to run automatically at boot. These will be run with admin privileges. We notice that one program is writeable by all users. We can replace this program with our reverse shell and restart the machine to gain admin access.&lt;/p&gt;
&lt;h3 id=&#34;task-8&#34;&gt;Task 8&lt;/h3&gt;
&lt;p&gt;We query the registry and find that the &lt;code&gt;AlwaysInstallElevated&lt;/code&gt; key is enabled. We can generate an installer that will automatically run with elevated privileges when it is installed.&lt;/p&gt;
&lt;h2 id=&#34;passwords&#34;&gt;Passwords&lt;/h2&gt;
&lt;h3 id=&#34;task-9&#34;&gt;Task 9&lt;/h3&gt;
&lt;p&gt;We can query the registry for the string &lt;code&gt;password&lt;/code&gt; to find user credentials. We find admin AutoLogin credentials and use the &lt;code&gt;winexe&lt;/code&gt; command in Kali to log on to the machine.&lt;/p&gt;
&lt;h3 id=&#34;task-10&#34;&gt;Task 10&lt;/h3&gt;
&lt;p&gt;A local admin user has saved their login credentials on the machine. We use the &lt;code&gt;cmdkey /list&lt;/code&gt; command to check for credentials and then the &lt;code&gt;runas /savecred&lt;/code&gt; command to take advantage of the saved credentials to run our reverse shell with admin privileges.&lt;/p&gt;
&lt;h3 id=&#34;task-11&#34;&gt;Task 11&lt;/h3&gt;
&lt;p&gt;We have access to backup copies of the &lt;code&gt;SAM&lt;/code&gt; and &lt;code&gt;SYSTEM&lt;/code&gt; files for our machine. We can use &lt;code&gt;creddump7&lt;/code&gt; to extract the NTLM hashes of the users on the system. We then use &lt;code&gt;hashcat&lt;/code&gt; to crack the admin password using a wordlist.&lt;/p&gt;
&lt;h3 id=&#34;task-12&#34;&gt;Task 12&lt;/h3&gt;
&lt;p&gt;Since we have the NTLM hash, we can now use &lt;code&gt;pass the hash&lt;/code&gt; to login to the system without even needing to crack the hash to obtain the password.&lt;/p&gt;
&lt;h2 id=&#34;scheduled-tasks&#34;&gt;Scheduled Tasks&lt;/h2&gt;
&lt;h3 id=&#34;task-13&#34;&gt;Task 13&lt;/h3&gt;
&lt;p&gt;The machine has a task set to run a PowerShell script every minute with SYSTEM privileges. In addition, we have permission to write to this file. All we have to do is add a line to the script to run our reverse shell executable.&lt;/p&gt;
&lt;h2 id=&#34;insecure-gui-apps&#34;&gt;Insecure GUI Apps&lt;/h2&gt;
&lt;h3 id=&#34;task-14&#34;&gt;Task 14&lt;/h3&gt;
&lt;p&gt;Pasting in a file location in the navigation input of the file open dialog bypasses the file type check that the application usually performs when opening a file. Since the application is running with admin privileges, it will also run our &lt;code&gt;cmd.exe&lt;/code&gt; with admin privileges.&lt;/p&gt;
&lt;h2 id=&#34;startup-apps&#34;&gt;Startup Apps&lt;/h2&gt;
&lt;h3 id=&#34;task-15&#34;&gt;Task 15&lt;/h3&gt;
&lt;p&gt;We have permissions to write to the admin startup directory. We&amp;rsquo;re going to create a new shortcut to our reverse shell executable in the startup directory so that it will run the next time the admin user logs on.&lt;/p&gt;
&lt;h2 id=&#34;token-impersonation&#34;&gt;Token Impersonation&lt;/h2&gt;
&lt;h3 id=&#34;task-16&#34;&gt;Task 16&lt;/h3&gt;
&lt;p&gt;For this task we&amp;rsquo;re exploiting a vulnerability in Windows to get local privilege execution. It turns out that if our user has &lt;code&gt;SeImpersonate&lt;/code&gt; or &lt;code&gt;SeAssignPrimaryToken&lt;/code&gt; privileges, we can use those to gain &lt;code&gt;SYSTEM&lt;/code&gt; privileges.&lt;/p&gt;
&lt;h3 id=&#34;task-17&#34;&gt;Task 17&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re again abusing &lt;code&gt;SeImpersonatePrivilege&lt;/code&gt; with the PrintSpoofer vulnerability to escalate local access to &lt;code&gt;SYSTEM&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;privilege-escalation-scripts&#34;&gt;Privilege Escalation Scripts&lt;/h2&gt;
&lt;h3 id=&#34;task-18&#34;&gt;Task 18&lt;/h3&gt;
&lt;p&gt;All four of these tools check for most of the vulnerabilities that we&amp;rsquo;ve experimented with. Automated tools make it extremely easy for an attacker or penetration tester to find vulnerabilities on a Windows machine.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>TryHackMe Windows PrivEsc Arena Write-Up</title>
      <link>https://markramige.com/posts/tryhackme-windows-privesc-arena-write-up/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://markramige.com/posts/tryhackme-windows-privesc-arena-write-up/</guid>
      <description>The Windows PrivEsc Arena TryHackMe room includes a vulnerable Windows 7 virtual machine and demonstrates several types of privilege escalation techniques. There aren&amp;rsquo;t many challenges included in the room, but just knowing how many different ways attackers can gain elevated privileges on a Windows machine is valuable. Also, many of the tasks show us how to use features of Metasploit to exploit Windows machines.
Contents  Registry Escalation Service Escalation Privilege Escalation Potato Escalation Password Mining Escalation  Registry Escalation Task 3 In this task we notice that C:\Program Files\Autorun Program\program.</description>
      <content>&lt;p&gt;The Windows PrivEsc Arena &lt;a href=&#34;https://tryhackme.com/room/windowsprivescarena&#34;&gt;TryHackMe room&lt;/a&gt; includes a vulnerable Windows 7 virtual machine and demonstrates several types of privilege escalation techniques. There aren&amp;rsquo;t many challenges included in the room, but just knowing how many different ways attackers can gain elevated privileges on a Windows machine is valuable. Also, many of the tasks show us how to use features of Metasploit to exploit Windows machines.&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#registry-escalation&#34;&gt;Registry Escalation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#service-escalation&#34;&gt;Service Escalation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#privilege-escalation&#34;&gt;Privilege Escalation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#potato-escalation&#34;&gt;Potato Escalation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#password-mining-escalation&#34;&gt;Password Mining Escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;registry-escalation&#34;&gt;Registry Escalation&lt;/h2&gt;
&lt;h3 id=&#34;task-3&#34;&gt;Task 3&lt;/h3&gt;
&lt;p&gt;In this task we notice that &lt;code&gt;C:\Program Files\Autorun Program\program.exe&lt;/code&gt; is set to run at startup with administrator privileges. We also notice that the &lt;code&gt;Everyone&lt;/code&gt; user group has &lt;code&gt;FILE_ALL_ACCESS&lt;/code&gt; permission on &lt;code&gt;program.exe&lt;/code&gt;. This means we can replace the file with our own version and have that run at startup instead. Next we use &lt;code&gt;Metasploit&lt;/code&gt; to open a listener on our Kali box and generate a reverse shell to place on the Windows system as &lt;code&gt;program.exe&lt;/code&gt;. The next time we log on the reverse shell will run and we will be connected with administrator privileges.&lt;/p&gt;
&lt;h3 id=&#34;task-4&#34;&gt;Task 4&lt;/h3&gt;
&lt;p&gt;We check the registry for the &lt;code&gt;AlwaysInstallElevated&lt;/code&gt; key and notice that it is set to &lt;code&gt;1&lt;/code&gt;. This means anything we install will have elevated privileges even if we install it as a normal user. We can generate a reverse shell installer with Metasploit and install it on our Windows machine. This will automatically connect to our listener and give us elevated permissions after installation.&lt;/p&gt;
&lt;h2 id=&#34;service-escalation&#34;&gt;Service Escalation&lt;/h2&gt;
&lt;h3 id=&#34;task-5&#34;&gt;Task 5&lt;/h3&gt;
&lt;p&gt;The ability to control the registry entry for a Windows service means we can replace that executable file that is run when the service starts. In this task, we create a custom service executable that adds our normal user to the &lt;code&gt;administrators&lt;/code&gt; group. After we start the service, our user will have elevated privileges.&lt;/p&gt;
&lt;h3 id=&#34;task-6&#34;&gt;Task 6&lt;/h3&gt;
&lt;p&gt;This task is similar to Task 5, but we don&amp;rsquo;t need registry permissions. We check the &lt;code&gt;filepermsvc&lt;/code&gt; executable and notice that the &lt;code&gt;Everyone&lt;/code&gt; group has &lt;code&gt;FILE_ALL_ACCESS&lt;/code&gt; permissions. This means we can just replace the executable with the same one we used in Task 5 and then start the service.&lt;/p&gt;
&lt;h3 id=&#34;task-8&#34;&gt;Task 8&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;procmon&lt;/code&gt;, we notice that &lt;code&gt;dllsvc&lt;/code&gt; is calling &lt;code&gt;C:\Temp\hijackme.dll&lt;/code&gt;, but it is not found. We know that &lt;code&gt;C:\Temp&lt;/code&gt; is a writeable location, so we generate a reverse shell using Metasploit and copy it to that location. We can then start &lt;code&gt;dllsvc&lt;/code&gt; and our reverse shell will connect.&lt;/p&gt;
&lt;h3 id=&#34;task-9&#34;&gt;Task 9&lt;/h3&gt;
&lt;p&gt;Having permissions to configure a Windows service means we can change the command that runs when the service starts. We&amp;rsquo;re going to change the &lt;code&gt;daclsvc&lt;/code&gt; to run &lt;code&gt;net localgroup administrators user /add&lt;/code&gt;. This will add our user to the administrators group so that we have elevated privileges.&lt;/p&gt;
&lt;h3 id=&#34;task-10&#34;&gt;Task 10&lt;/h3&gt;
&lt;p&gt;When looking at the details of the &lt;code&gt;unquotedsvc&lt;/code&gt;, we notice that the &lt;code&gt;BINARY_PATH_NAME&lt;/code&gt; is unquoted. Because there&amp;rsquo;s a space in the path and we can write to that directory, we can make Windows execute &lt;code&gt;C:\Program Files\Unquoted Path Service\common.exe&lt;/code&gt; instead of &lt;code&gt;C:\Program Files\Unquoted Path Service\Common Files\unquotedpathservice.exe&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h2&gt;
&lt;h3 id=&#34;task-7&#34;&gt;Task 7&lt;/h3&gt;
&lt;p&gt;We notice that as a normal user we can write to the &lt;code&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt; directory. Any programs that we add here will be run with administrator privileges. We create a reverse shell and place it in that directory and the log back in to connect to our listener with elevated privileges.&lt;/p&gt;
&lt;h3 id=&#34;task-14&#34;&gt;Task 14&lt;/h3&gt;
&lt;p&gt;In this task we&amp;rsquo;re using Metasploit to suggest exploits to use based on our Windows machine version and update status. It suggests using &lt;code&gt;exploit/windows/local/ms16_014_wmi_recv_notif&lt;/code&gt;. We then run the exploit and gain elevated privileges in our reverse shell.&lt;/p&gt;
&lt;h2 id=&#34;potato-escalation&#34;&gt;Potato Escalation&lt;/h2&gt;
&lt;h3 id=&#34;task-11&#34;&gt;Task 11&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/foxglovesec/Potato&#34;&gt;Potato exploit&lt;/a&gt; allows us to run an arbitrary command with elevated privileges. For this task we&amp;rsquo;re going to use Potato to run &lt;code&gt;net localgroup administrators user /add&lt;/code&gt; which gives our normal user administrator privileges.&lt;/p&gt;
&lt;h2 id=&#34;password-mining-escalation&#34;&gt;Password Mining Escalation&lt;/h2&gt;
&lt;h3 id=&#34;task-12&#34;&gt;Task 12&lt;/h3&gt;
&lt;p&gt;This task has us look at a config file for possible secrets. We notice that the &lt;code&gt;&amp;lt;Password&amp;gt;&lt;/code&gt; property value is base64 encoded. We can decode it to find the account password in clear text.&lt;/p&gt;
&lt;h3 id=&#34;task-13&#34;&gt;Task 13&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re going to capture a memory dump of the running &lt;code&gt;iexplore.exe&lt;/code&gt; process. Running &lt;code&gt;strings&lt;/code&gt; on the dump file allows us to extract base64 encoded passwords that have been sent to a website.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
