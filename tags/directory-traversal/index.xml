<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>directory traversal on Mark Ramige: Cybersecurity and Linux, mostly</title>
    <link>https://markramige.com/tags/directory-traversal/</link>
    <description>Recent content in directory traversal on Mark Ramige: Cybersecurity and Linux, mostly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2021 &lt;a href=&#39;https://github.com/markramige/markramige.com&#39;&gt;Mark Ramige&lt;/a&gt; :: &lt;a href=&#39;https://creativecommons.org/licenses/by/4.0/?ref=chooser-v1&#39;&gt;CC BY 4.0&lt;/a&gt; Licensed :: Powered by &lt;a href=&#39;http://gohugo.io&#39;&gt;Hugo&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 22 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://markramige.com/tags/directory-traversal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TryHackMe WebAppSec 101 Write-Up</title>
      <link>https://markramige.com/posts/tryhackme-webappsec-101-write-up/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://markramige.com/posts/tryhackme-webappsec-101-write-up/</guid>
      <description>This TryHackMe room contains a web application with multiple vulnerabilities. The tasks step us through different types of vulnerabilities with links to authoritative resources to learn more about each type. There is a good combination of hand-holding and do-it-yourself. The vulnerabilities include weak credentials, cross-site scripting (xss), command and sql injection, idor, directory traversal, and logic flaws.
Contents  Task 2 - Walking through the application Task 4 - Authentication Task 5 - Cross Site Scripting (XSS) Task 6 - Injection Task 7 - Miscellaneous &amp;amp; Logic Flaws  Task 2 - Walking through the application We can proxy the traffic through Burp Suite to view all of the response headers.</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://tryhackme.com/room/webappsec101&#34;&gt;This TryHackMe room&lt;/a&gt; contains a web application with multiple vulnerabilities. The tasks step us through different types of vulnerabilities with links to authoritative resources to learn more about each type. There is a good combination of hand-holding and do-it-yourself. The vulnerabilities include weak credentials, cross-site scripting (xss), command and sql injection, idor, directory traversal, and logic flaws.&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-2---walking-through-the-application&#34;&gt;Task 2 - Walking through the application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-4---authentication&#34;&gt;Task 4 - Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-5---cross-site-scripting-xss&#34;&gt;Task 5 - Cross Site Scripting (XSS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-6---injection&#34;&gt;Task 6 - Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-7---miscellaneous--logic-flaws&#34;&gt;Task 7 - Miscellaneous &amp;amp; Logic Flaws&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;task-2---walking-through-the-application&#34;&gt;Task 2 - Walking through the application&lt;/h2&gt;
&lt;p&gt;We can proxy the traffic through Burp Suite to view all of the response headers. For this web application, it sends a &lt;code&gt;Server&lt;/code&gt; and &lt;code&gt;X-Powered-By&lt;/code&gt; header with every response.&lt;/p&gt;
&lt;p&gt;For the server specifically, we can also force it to produce a 404 error by visiting &lt;code&gt;http://MACHINE_IP/asdf&lt;/code&gt; (or any other nonexisting page) and the server name and version is given on the 404 error page. We could also run &lt;code&gt;nmap -A -T4 MACHINE_IP&lt;/code&gt; to get the server name and version.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What version of Apache is being used?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check the &lt;code&gt;Server&lt;/code&gt; response header in Burp Suite.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What language was used to create the website?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check the &lt;code&gt;X-Powered-By&lt;/code&gt; response header.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What version of the language is used?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check the &lt;code&gt;X-Powered-By&lt;/code&gt; response header.&lt;/p&gt;
&lt;h2 id=&#34;task-4---authentication&#34;&gt;Task 4 - Authentication&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is the admin username?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;rsquo;s a link to the admin area at the bottom of each page. Click on the link and try to guess the user name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the admin password?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try to guess the password using common passwords.&lt;/p&gt;
&lt;p&gt;An alternative to guessing (if this challenge was more difficult) would be to use Burp Suite Intruder to brute force the password using a word list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the name of the cookie that can be manipulated?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A cookie is set when logging into the admin page. The value is a single digit that can be easily manipulated to steal a session.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the username of a logged on user?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this we want to brute force the user creation page (&lt;code&gt;http://MACHINE_IP/users/register.php&lt;/code&gt;) since it will tell us when an account already exists.&lt;/p&gt;
&lt;p&gt;We can use &lt;a href=&#34;https://owasp.org/www-project-zap/&#34;&gt;OWASP ZAP&lt;/a&gt; to fuzz the user names since the Burp Suite Community Edition is slow at brute forcing.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to use the &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/Usernames/Names/names.txt&#34;&gt;SecLists&lt;/a&gt; user name list.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re registering an account with each user name that gets submitted, so what we&amp;rsquo;re looking for in the output is the name that can&amp;rsquo;t be registered because it already exists.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the corresponding password to the username?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try guessing first based on what you know about the user name and user. If you can&amp;rsquo;t guess the password, try brute forcing it with a &lt;a href=&#34;https://github.com/danielmiessler/SecLists/tree/master/Passwords&#34;&gt;word list&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;task-5---cross-site-scripting-xss&#34;&gt;Task 5 - Cross Site Scripting (XSS)&lt;/h2&gt;
&lt;p&gt;Use the first payload on the linked page to test for XSS.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;SCRIPT SRC=http://xss.rocks/xss.js&amp;gt;&amp;lt;/SCRIPT&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test for XSS on the search bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This input is vulnerable to reflected XSS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test for XSS on the guestbook page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This input is vulnerable to stored XSS.&lt;/p&gt;
&lt;h2 id=&#34;task-6---injection&#34;&gt;Task 6 - Injection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Perform command injection on the check password field&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we test the field, we get back &lt;code&gt;The command &amp;quot;grep ^test$ /etc/dictionaries-common/words&amp;quot; was used to check if the password was in the dictionary.&lt;/code&gt; which is very handy!&lt;/p&gt;
&lt;p&gt;We just need to end the grep command and insert our own command after it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;&#39;;ls;&lt;/code&gt; should work for any command that we have permissions to run. This will hang the application.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check for SQLi on the application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The login form (http://MACHINE_IP/users/login.php) is vulnerable to SQLi. Try testing &lt;a href=&#34;https://medium.com/@ismailtasdelen/sql-injection-payload-list-b97656cfd66b&#34;&gt;payloads&lt;/a&gt; to see what is possible.&lt;/p&gt;
&lt;h2 id=&#34;task-7---miscellaneous--logic-flaws&#34;&gt;Task 7 - Miscellaneous &amp;amp; Logic Flaws&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Find a parameter manipulation vulnerability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sample page linked from the home page at &lt;code&gt;http://MACHINE_IP/users/sample.php?userid=1&lt;/code&gt; contains the &lt;code&gt;userid&lt;/code&gt; parameter that we can easily change to view additional photos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a directory traversal vulnerability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The file name field on the picture upload page (&lt;code&gt;http://MACHINE_IP/pictures/upload.php&lt;/code&gt;) allows us to exploit directory traversal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a forceful browsing vulnerability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can visit &lt;code&gt;http://MACHINE_IP/upload/&lt;/code&gt; and view all images that have been uploaded by all users.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logic flaw: try to get an item for free&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can fuzz the coupon code field on the cart review page (&lt;code&gt;http://MACHINE_IP/cart/review.php&lt;/code&gt;). Unsuccessful attempts give us a 303 status code.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
